import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class TextSearch {

    private static final int NUM_THREADS = 4; // Количество потоков

    private static final String SEARCH_STRING = "search string"; // Заданная подстрока

    private static final String DIRECTORY_PATH = "directory path"; // Путь к директории с файлами

    private static final ExecutorService executor = Executors.newFixedThreadPool(NUM_THREADS); // Пул потоков

    public static void main(String[] args) {
        List<File> files = getFilesFromDirectory(DIRECTORY_PATH); // Получаем список файлов в директории

        for (File file : files) {
            Runnable searchTask = new SearchTask(file, SEARCH_STRING); // Создаем задачу поиска для каждого файла
            executor.execute(searchTask); // Добавляем задачу в пул потоков
        }

        executor.shutdown(); // Завершаем работу пула потоков
        try {
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS); // Ждем завершения всех потоков
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    // Метод для получения списка файлов в директории
    private static List<File> getFilesFromDirectory(String directoryPath) {
        List<File> files = new ArrayList<>();
        File directory = new File(directoryPath);
        File[] fileList = directory.listFiles();
        for (File file : fileList) {
            if (file.isFile()) {
                files.add(file);
            }
        }
        return files;
    }

    // Класс задачи поиска в отдельном файле
    private static class SearchTask implements Runnable {
        private final File file;
        private final String searchString;

        public SearchTask(File file, String searchString) {
            this.file = file;
            this.searchString = searchString;
        }

        @Override
        public void run() {
            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                String line;
                int lineNumber = 0;
                while ((line = reader.readLine()) != null) {
                    lineNumber++;
                    if (line.contains(searchString)) {
                        System.out.println("Found in file " + file.getName() + " at line " + lineNumber);
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
